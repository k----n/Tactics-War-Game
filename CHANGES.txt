AUTHORS
    Kalvin Eng and Nicholas Westbury

PURPOSE
    This file outlines the changes made from the base eClass Tactics
    War Game in accordance with assignment #2.

TASK 1) Added PT Boat Unit
   - created unit/pt_boat.py for a PT boat class
   - added 'pt_boat' unit to unit/__init__.py 
   - edited maps/island.lvl to include a couple of PT boat units

TASK 2) Added a Power-Up System
   - created a powerup folder in main directory
   - created powerup/base_power.py to contain BasePower function
   - created powerup/Health_PUP.py, powerup/Attack_PUP.py,
     powerup/Speed_PUP.py for a health, attack and speed power up
     respectively
     - each .py contains a subclass that inherits from the BasePower
       function, and a 'use' function in the subclass to modify unit
       stats according to power up
       - Health_PUP.py modifies unit health and redraws the unit
       - Speed_PUP.py increases a unit speed (by default it is 2)
       - Attack_PUP.py increases a unit's damage ability except
         for "Transport" units (by default increase is 2)
   - modified gui.py to import powerup classes and functions
   - modified load_level function in gui.py so that power ups can be
     loaded from maps if they exist in the map file
   - modified draw function in gui.py so that power ups are drawn to
     the map (just like units)
   - modified update function in gui.py so that if a unit intersects
     a power up after moving, the power up is used on the unit and
     deactivated
   - modified draw_bar function in gui.py so that a description of the
     power up is given on the right side of the screen when the mouse
     hovers over it
   - modified maps/island.lvl to include one each of the power ups
     - For example, add the following for power ups:

       POWER-UPS START
       Health-PUP X Y
       Speed-PUP X Y
       Attack-PUP X Y
       POWER-UPS END
       
       where X,Y are X and Y coordinates for the power up

TASK 3)
    - only the gather.py was modified
    - changed the gather function to find the optimal value for
      a given transporter weight
    - the function is a recursive function that uses our in-class
      memoize function decorator and was inspired from an implementation
      of the knapsack problem (in particular: http://codereview.stackex
      change.com/questions/20569/dynamic-programming-solution-to-knapsa
      ck-problem ). The solution is O(C*n) [C = capacity and n = # of
      units]
